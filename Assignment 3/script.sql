-- MySQL Script generated by MySQL Workbench
-- Thu Sep 26 18:24:37 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
-- -----------------------------------------------------
-- Schema library
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `library` ;

-- -----------------------------------------------------
-- Schema library
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `library` DEFAULT CHARACTER SET utf8 ;
USE `library` ;

-- -----------------------------------------------------
-- Table `library`.`Role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`Role` ;

CREATE TABLE IF NOT EXISTS `library`.`Role` (
  `RoleID` INT NOT NULL AUTO_INCREMENT,
  `RoleName` VARCHAR(32) NOT NULL,
  `MaximumDays` INT NOT NULL CHECK(MaximumDays>0),
  `MaximumItems` INT NOT NULL CHECK(MaximumItems>0),
  UNIQUE INDEX `RoleName_UNIQUE` (`RoleName` ASC) VISIBLE,
  PRIMARY KEY (`RoleID`))
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `library`.`Department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`Department` ;

CREATE TABLE IF NOT EXISTS `library`.`Department` (
  `DepartmentID` INT NOT NULL AUTO_INCREMENT,
  `DepartmentName` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`DepartmentID`),
  UNIQUE INDEX `DepartmentName_UNIQUE` (`DepartmentName` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `library`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`User` ;

CREATE TABLE IF NOT EXISTS `library`.`User` (
  `NetID` CHAR(9) NOT NULL,
  `UTDID` CHAR(10) NOT NULL,
  `FirstName` NVARCHAR(32) NOT NULL,
  `MiddleName` NVARCHAR(32) NULL,
  `LastName` NVARCHAR(32) NULL,
  `Gender` CHAR(1) NOT NULL CHECK (Gender in ('M', 'F')),
  `IsActive` BIT(1) NOT NULL,
  `RoleID` INT NOT NULL,
  `DepartmentID` INT NOT NULL,
  PRIMARY KEY (`NetID`),
  UNIQUE INDEX `UTDID_UNIQUE` (`UTDID` ASC) VISIBLE,
  INDEX `fk_Role` (`RoleID` ASC) VISIBLE,
  INDEX `fk_Department` (`DepartmentID` ASC) VISIBLE,
  CONSTRAINT `fk_User_Role1`
    FOREIGN KEY (`RoleID`)
    REFERENCES `library`.`Role` (`RoleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_Department1`
    FOREIGN KEY (`DepartmentID`)
    REFERENCES `library`.`Department` (`DepartmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library`.`ContactMethod`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`ContactMethod` ;

CREATE TABLE IF NOT EXISTS `library`.`ContactMethod` (
  `ContactID` INT NOT NULL AUTO_INCREMENT,
  `ContactType` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`ContactID`),
  UNIQUE INDEX `ContactType_UNIQUE` (`ContactType` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `library`.`UserContactDetails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`UserContactDetails` ;

CREATE TABLE IF NOT EXISTS `library`.`UserContactDetails` (
  `ContactID` INT NOT NULL,
  `NetID` CHAR(9) NOT NULL,
  `Value` VARCHAR(256) NOT NULL,
  `Country` VARCHAR(32) NULL,
  PRIMARY KEY (`ContactID`, `NetID`),
  INDEX `fk_User` (`NetID` ASC) VISIBLE,
  INDEX `fk_ContactMethod` (`ContactID` ASC) VISIBLE,
  CONSTRAINT `fk_ContactMethod_has_User_ContactMethod1`
    FOREIGN KEY (`ContactID`)
    REFERENCES `library`.`ContactMethod` (`ContactID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ContactMethod_has_User_User1`
    FOREIGN KEY (`NetID`)
    REFERENCES `library`.`User` (`NetID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library`.`Genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`Genre` ;

CREATE TABLE IF NOT EXISTS `library`.`Genre` (
  `GenreID` INT NOT NULL AUTO_INCREMENT,
  `GenreName` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`GenreID`),
  UNIQUE INDEX `GenreName_UNIQUE` (`GenreName` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `library`.`Publisher`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`Publisher` ;

CREATE TABLE IF NOT EXISTS `library`.`Publisher` (
  `PublisherID` INT NOT NULL AUTO_INCREMENT,
  `PublisherName` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`PublisherID`),
  UNIQUE INDEX `PublisherName_UNIQUE` (`PublisherName` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `library`.`Composer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`Composer` ;

CREATE TABLE IF NOT EXISTS `library`.`Composer` (
  `ComposerID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(64) NOT NULL,
  `Profession` VARCHAR(64),
  PRIMARY KEY (`ComposerID`))
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `library`.`Resources`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`Resources` ;

CREATE TABLE IF NOT EXISTS `library`.`Resources` (
  `ResourceID` INT NOT NULL AUTO_INCREMENT,
  `ResourceType` VARCHAR(32) NOT NULL,
  `FinePerDay` DECIMAL(5,2) NULL CHECK (FinePerDay>0),
  `IsLoanable` BIT(1) NOT NULL,
  `MaximumFine` DECIMAL(5,2) NULL,
  PRIMARY KEY (`ResourceID`),
  CONSTRAINT max_fine CHECK (MaximumFine>=FinePerDay),
  UNIQUE INDEX `ResourceType_UNIQUE` (`ResourceType` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `library`.`BookResourceDetails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`BookResourceDetails` ;

CREATE TABLE IF NOT EXISTS `library`.`BookResourceDetails` (
  `ISBN` VARCHAR(13) NOT NULL,
  `Title` NVARCHAR(64) NOT NULL,
  `Edition` INT NULL CHECK (Edition>0) DEFAULT 1,
  `PublicationDate` DATE NOT NULL,
  `AvailableCopy` INT NOT NULL CHECK (AvailableCopy>0),
  `DeweyDecimalSystemNumber` VARCHAR(16) NULL,
  `CongressCatalogueNumber` VARCHAR(16) NULL,
  `Pages` INT NOT NULL CHECK (Pages>0),
  `Description` VARCHAR(256) NULL,
  `ResourceID` INT NOT NULL,
  `PublisherID` INT NOT NULL,
  `GenreID` INT NOT NULL,
  `Location` CHAR(16) NOT NULL,
  `DateAdded` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ISBN`),
  INDEX `fk_Resources` (`ResourceID` ASC) VISIBLE,
  INDEX `fk_Publisher` (`PublisherID` ASC) VISIBLE,
  INDEX `fk_Genre` (`GenreID` ASC) VISIBLE,
  INDEX `lookupResource` (`Title` ASC, `Location` ASC, `AvailableCopy` ASC) INVISIBLE,
  CONSTRAINT `fk_BookResourceDetails_Resources1`
    FOREIGN KEY (`ResourceID`)
    REFERENCES `library`.`Resources` (`ResourceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BookResourceDetails_Publisher1`
    FOREIGN KEY (`PublisherID`)
    REFERENCES `library`.`Publisher` (`PublisherID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BookResourceDetails_Genre1`
    FOREIGN KEY (`GenreID`)
    REFERENCES `library`.`Genre` (`GenreID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library`.`DigitalResourceDetails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`DigitalResourceDetails` ;

CREATE TABLE IF NOT EXISTS `library`.`DigitalResourceDetails` (
  `Title` VARCHAR(32) NOT NULL,
  `RunningTime` INT NULL CHECK (RunningTime>0),
  `Storyline` VARCHAR(256) NULL,
  `Year` INT NULL CHECK (Year>0),
  `CongressCatalogueNumber` VARCHAR(16) NULL,
  `GenreID` INT NOT NULL,
  `ResourceID` INT NOT NULL,
  `Location` CHAR(16) NOT NULL,
  PRIMARY KEY (`Title`),
  INDEX `fk_Genre` (`GenreID` ASC) VISIBLE,
  INDEX `fk_Resources` (`ResourceID` ASC) VISIBLE,
  UNIQUE INDEX `Location_UNIQUE` (`Location` ASC) VISIBLE,
  INDEX `lookupResource` (`Title` ASC, `Location` ASC) VISIBLE,
  CONSTRAINT `fk_DigitalResourceDetails_Genre1`
    FOREIGN KEY (`GenreID`)
    REFERENCES `library`.`Genre` (`GenreID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DigitalResourceDetails_Resources1`
    FOREIGN KEY (`ResourceID`)
    REFERENCES `library`.`Resources` (`ResourceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library`.`UserLoanedDetails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`UserLoanedDetails` ;

CREATE TABLE IF NOT EXISTS `library`.`UserLoanedDetails` (
  `id` VARCHAR(32) NOT NULL,
  `NetID` CHAR(9) NOT NULL,
  `DueDate` DATETIME NOT NULL,
  `Fine` DECIMAL(5,2) NULL CHECK(Fine>0),
  `CheckOutDate` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`, `NetID`),
  INDEX `fk_User` (`NetID` ASC) VISIBLE,
  INDEX `fk_BookDigitalResourceDetails` (`id` ASC) VISIBLE,
  CONSTRAINT `dDate` CHECK(`DueDate`>`CheckOutDate`),
  CONSTRAINT `fk_BookResourceDetails_has_User_BookResourceDetails1`
    FOREIGN KEY (`id`)
    REFERENCES `library`.`BookResourceDetails` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BookResourceDetails_has_User_User1`
    FOREIGN KEY (`NetID`)
    REFERENCES `library`.`User` (`NetID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_UserLoanedDetails_DigitalResourceDetails1`
    FOREIGN KEY (`id`)
    REFERENCES `library`.`DigitalResourceDetails` (`Title`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `library`.`ResourceComposer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `library`.`ResourceComposer` ;

CREATE TABLE IF NOT EXISTS `library`.`ResourceComposer` (
  `Title` VARCHAR(32) NOT NULL,
  `ComposerID` INT NOT NULL,
  PRIMARY KEY (`Title`, `ComposerID`),
  INDEX `fk_Composer` (`ComposerID` ASC) VISIBLE,
  INDEX `fk_BookDigitalResourceDetails` (`Title` ASC) VISIBLE,
  CONSTRAINT `fk_BookResourceDetails_has_Composer_BookResourceDetails1`
    FOREIGN KEY (`Title`)
    REFERENCES `library`.`BookResourceDetails` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BookResourceDetails_has_Composer_Composer1`
    FOREIGN KEY (`ComposerID`)
    REFERENCES `library`.`Composer` (`ComposerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
  )
ENGINE = InnoDB;

insert into publisher(publisherName) values ("Google"), ("Microsoft"), ("Oracle"), ("JavaTpoint"), ("TutorialsPoint");

INSERT INTO `library`.`resources`(`ResourceType`,`FinePerDay`,`IsLoanable`,`MaximumFine`) VALUES 
("Paperback Books",0.5,1,50), 
("Hardbound Books",0.5,1,50),
("Magazines",0.5,1,50),
("Journals",0.25,1,25);

INSERT INTO `library`.`resources`(`ResourceType`,`IsLoanable`) VALUES ("e-Books", 0), ("Rare Books", 0), ("Manuscripts",0);

INSERT INTO `library`.`genre`(`GenreName`) VALUES ("Fiction"), ("Non-Fiction"), ("Poetry");

DROP PROCEDURE IF EXISTS insert_book;

Delimiter $$

CREATE PROCEDURE insert_book (
IN isbn varchar(13),
IN title varchar(64),
IN ccn varchar(16),
IN pages int,
IN edition int,
IN ddn varchar(16),
IN publication_date date,
IN genre varchar(32),
IN publisher varchar(64),
IN resource_type varchar(32),
IN copy int,
IN location char(16)
)

BEGIN
	DECLARE res_id int;
	DECLARE genre_id int;
    DECLARE publisher_id int;
    
    -- ************* Resource Type
    select `ResourceID` into res_id from resources where `ResourceType` = resource_type;
    
    -- ************* Genre
    select `GenreID` into genre_id from Genre where `GenreName` = genre;
    if isnull(genre_id) then
		insert into Genre(`GenreName`) values (genre);
		select `GenreID` into genre_id from Genre where `GenreName` = genre;
	end if;
	-- ************* Publisher
    select `PublisherID` into publisher_id from Publisher where `PublisherName` = publisher;
	if isnull(publisher_id) then
		insert into publisher(`PublisherName`) values (publisher);
        select `PublisherID` into publisher_id from Publisher where `PublisherName` = publisher;
    end if;
    -- ************* BookResourceDetails
    insert into bookresourcedetails(`ISBN`,`Title`,`Edition`,`PublicationDate`,`AvailableCopy`,
    `DeweyDecimalSystemNumber`,`CongressCatalogueNumber`,`Pages`,`ResourceID`,
    `PublisherID`,`GenreID`,`Location`) values(isbn, title, edition, publication_date, copy, 
    ddn, ccn, pages, res_id, publisher_id, genre_id, location); 
    
END;

Delimiter;

DROP PROCEDURE IF EXISTS update_book;

Delimiter $$

CREATE PROCEDURE update_book (
IN isbn_in varchar(13),
IN title varchar(64),
IN ccn varchar(16),
IN pages int,
IN edition int,
IN ddn varchar(16),
IN publication_date date,
IN genre varchar(32),
IN publisher varchar(64),
IN resource_type varchar(32),
IN copy int,
IN location char(16)
)

BEGIN
	DECLARE res_id int;
	DECLARE genre_id int;
    DECLARE publisher_id int;
    
    -- ************* Resource Type
    select `ResourceID` into res_id from resources where `ResourceType` = resource_type;
    
    -- ************* Genre
    select `GenreID` into genre_id from Genre where `GenreName` = genre;
    if isnull(genre_id) then
		insert into Genre(`GenreName`) values (genre);
		select `GenreID` into genre_id from Genre where `GenreName` = genre;
	end if;
	-- ************* Publisher
    select `PublisherID` into publisher_id from Publisher where `PublisherName` = publisher;
	if isnull(publisher_id) then
		insert into publisher(`PublisherName`) values (publisher);
        select `PublisherID` into publisher_id from Publisher where `PublisherName` = publisher;
    end if;
    -- ************* BookResourceDetails
    update bookresourcedetails set
    `Title` = title,
    `Edition` = edition,
    `PublicationDate`= publication_date,
    `AvailableCopy` = copy,
    `DeweyDecimalSystemNumber` = ddn,
    `CongressCatalogueNumber` = ccn,
    `Pages` = pages,
    `ResourceID` = res_id,
    `PublisherID` = publisher_id,
    `GenreID` = genre_id,
    `Location` = location
    where `ISBN` = isbn_in;
END;

Delimiter;

DROP PROCEDURE IF EXISTS insert_author;

Delimiter $$

CREATE PROCEDURE insert_author (
IN isbn varchar(13),
IN author varchar(64)
)

BEGIN
	DECLARE composer_id int;
    
    -- ************* Composer
    select `ComposerID` into composer_id from composer where `Name` = author;
    if isnull(composer_id) then
		insert into Composer(`Name`) values (author);
        select `ComposerID` into composer_id from composer where `Name` = author;
    end if;
    
    -- ************* Resource Composer
    insert into resourcecomposer(`title`, `composerID`) values (isbn, composer_id);
    
END;

Delimiter;

